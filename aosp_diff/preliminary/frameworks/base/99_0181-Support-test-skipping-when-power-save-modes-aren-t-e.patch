From c89a900aec63165217523766d7a122080e5352dc Mon Sep 17 00:00:00 2001
From: "Reddy, Alavala Srinivasa" <alavala.srinivasa.reddy@intel.com>
Date: Tue, 8 Aug 2023 21:50:59 +0530
Subject: [PATCH] Support test skipping when power save modes aren't enabled.

Some classes of devices will not have auto power save modes enabled. On
those devices, we should skip tests that require the modes be enabled.

Bug: 240108412
Bug: 240630396
Test: Manually go through CTS-V "Ignore Battery Optimizations Test"
Test: atest CtsUsageStatsTestCases:UsageStatsTest
Change-Id: Icc64fbe75213386a1f41fae258e50c4032920b0a
(cherry picked from commit ba3b5d7e53428b8259abe22e7b3f86ed43e8fe33)
Merged-In: Icc64fbe75213386a1f41fae258e50c4032920b0a
author Kweku Adams <kwekua@google.com>	Fri Jul 29 18:05:16 2022 +0000

Ported the above patch, Resloved the STS-CVE-2023-2118 Testcase issue .
Failed details
STS Module -x86_64 CtsSecurityBulletinHostTestCases
STS Testcase -android.security.cts.CVE_2023_21128#testPocCVE_2023_21128
After porting this patch , The STS testcase was Passed.

Signed-off-by: Reddy, Alavala Srinivasa <alavala.srinivasa.reddy@intel.com>
---
 .../server/usage/AppStandbyController.java        |  6 ++++--
 api/test-current.txt                              |  2 ++
 .../android/app/usage/IUsageStatsManager.aidl     |  1 +
 .../java/android/app/usage/UsageStatsManager.java | 13 +++++++++++++
 core/java/android/os/IPowerManager.aidl           |  1 +
 core/java/android/os/PowerManager.java            | 15 +++++++++++++++
 .../android/server/power/PowerManagerService.java | 11 +++++++++++
 .../android/server/usage/UsageStatsService.java   |  5 +++++
 8 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java b/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java
index 403e8b5547bd..b609a45345b7 100644
--- a/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java
+++ b/apex/jobscheduler/service/java/com/android/server/usage/AppStandbyController.java
@@ -1260,8 +1260,10 @@ public class AppStandbyController implements AppStandbyInternal {
     @Override
     @StandbyBuckets public int getAppStandbyBucket(String packageName, int userId,
             long elapsedRealtime, boolean shouldObfuscateInstantApps) {
-        if (!mAppIdleEnabled || (shouldObfuscateInstantApps
-                && mInjector.isPackageEphemeral(userId, packageName))) {
+	if (!mAppIdleEnabled) {
+            return STANDBY_BUCKET_EXEMPTED;
+        }
+        if (shouldObfuscateInstantApps && mInjector.isPackageEphemeral(userId, packageName)) {	
             return STANDBY_BUCKET_ACTIVE;
         }
 
diff --git a/api/test-current.txt b/api/test-current.txt
index cf97b848e80b..50ca8ad84b48 100644
--- a/api/test-current.txt
+++ b/api/test-current.txt
@@ -774,6 +774,7 @@ package android.app.usage {
 
   public final class UsageStatsManager {
     method public void forceUsageSourceSettingRead();
+    method public boolean isAppStandbyEnabled();
   }
 
 }
@@ -2784,6 +2785,7 @@ package android.os {
   }
 
   public final class PowerManager {
+    method public boolean areAutoPowerSaveModesEnabled();
     method @RequiresPermission("android.permission.POWER_SAVER") public int getPowerSaveModeTrigger();
     method @RequiresPermission("android.permission.POWER_SAVER") public boolean setDynamicPowerSaveHint(boolean, int);
     method @RequiresPermission(anyOf={"android.permission.DEVICE_POWER", "android.permission.POWER_SAVER"}) public boolean setPowerSaveModeEnabled(boolean);
diff --git a/core/java/android/app/usage/IUsageStatsManager.aidl b/core/java/android/app/usage/IUsageStatsManager.aidl
index ed6ba0c5efa4..d6239a2ed2dd 100644
--- a/core/java/android/app/usage/IUsageStatsManager.aidl
+++ b/core/java/android/app/usage/IUsageStatsManager.aidl
@@ -42,6 +42,7 @@ interface IUsageStatsManager {
     UsageEvents queryEventsForPackageForUser(long beginTime, long endTime, int userId, String pkg, String callingPackage);
     @UnsupportedAppUsage
     void setAppInactive(String packageName, boolean inactive, int userId);
+    boolean isAppStandbyEnabled();
     @UnsupportedAppUsage
     boolean isAppInactive(String packageName, int userId, String callingPackage);
     void onCarrierPrivilegedAppsChanged();
diff --git a/core/java/android/app/usage/UsageStatsManager.java b/core/java/android/app/usage/UsageStatsManager.java
index 8a6cc95319fb..a659c599ed1f 100644
--- a/core/java/android/app/usage/UsageStatsManager.java
+++ b/core/java/android/app/usage/UsageStatsManager.java
@@ -619,6 +619,19 @@ public final class UsageStatsManager {
     }
 
     /**
+     * Returns whether the app standby bucket feature is enabled.
+     * @hide
+     */
+    @TestApi
+    public boolean isAppStandbyEnabled() {
+	try {
+	    return mService.isAppStandbyEnabled();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**    
      * Returns whether the specified app is currently considered inactive. This will be true if the
      * app hasn't been used directly or indirectly for a period of time defined by the system. This
      * could be of the order of several hours or days. Apps are not considered inactive when the
diff --git a/core/java/android/os/IPowerManager.aidl b/core/java/android/os/IPowerManager.aidl
index f171441bb787..ed50baeb95a8 100644
--- a/core/java/android/os/IPowerManager.aidl
+++ b/core/java/android/os/IPowerManager.aidl
@@ -57,6 +57,7 @@ interface IPowerManager
     float getBrightnessConstraint(int constraint);
     @UnsupportedAppUsage
     boolean isInteractive();
+    boolean areAutoPowerSaveModesEnabled();
     boolean isPowerSaveMode();
     PowerSaveState getPowerSaveState(int serviceType);
     boolean setPowerSaveModeEnabled(boolean mode);
diff --git a/core/java/android/os/PowerManager.java b/core/java/android/os/PowerManager.java
index e3a0d18a23cd..36ef4d01200c 100644
--- a/core/java/android/os/PowerManager.java
+++ b/core/java/android/os/PowerManager.java
@@ -1545,6 +1545,21 @@ public final class PowerManager {
     }
 
     /**
+     * Returns true if the platform has auto power save modes (eg. Doze & app standby) enabled.
+     * This doesn't necessarily mean that the individual features are enabled. For example, if this
+     * returns true, Doze might be enabled while app standby buckets remain disabled.
+     * @hide
+     */
+    @TestApi
+    public boolean areAutoPowerSaveModesEnabled() {
+	try {
+            return mService.areAutoPowerSaveModesEnabled();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+    
+    /** 
      * Returns true if the device is currently in power save mode.  When in this mode,
      * applications should reduce their functionality in order to conserve battery as
      * much as possible.  You can monitor for changes to this state with
diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
index dee604a3a5d6..0d5b27e162e0 100644
--- a/services/core/java/com/android/server/power/PowerManagerService.java
+++ b/services/core/java/com/android/server/power/PowerManagerService.java
@@ -4974,6 +4974,17 @@ public final class PowerManagerService extends SystemService
         }
 
         @Override // Binder call
+	public boolean areAutoPowerSaveModesEnabled() {
+	    final long ident = Binder.clearCallingIdentity();
+            try {
+	        return mContext.getResources().getBoolean(
+		        com.android.internal.R.bool.config_enableAutoPowerModes);
+            } finally {
+                Binder.restoreCallingIdentity(ident);
+            }
+        }
+
+        @Override // Binder call	
         public boolean isPowerSaveMode() {
             final long ident = Binder.clearCallingIdentity();
             try {
diff --git a/services/usage/java/com/android/server/usage/UsageStatsService.java b/services/usage/java/com/android/server/usage/UsageStatsService.java
index c0b3feeaffc2..6f22417da6c2 100644
--- a/services/usage/java/com/android/server/usage/UsageStatsService.java
+++ b/services/usage/java/com/android/server/usage/UsageStatsService.java
@@ -1671,6 +1671,11 @@ public class UsageStatsService extends SystemService implements
         }
 
         @Override
+	public boolean isAppStandbyEnabled() {
+            return mAppStandby.isAppIdleEnabled();
+        }
+
+        @Override	
         public boolean isAppInactive(String packageName, int userId, String callingPackage) {
             final int callingUid = Binder.getCallingUid();
             try {
-- 
2.17.1

